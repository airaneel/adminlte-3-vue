{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/vue-i18n.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:5173",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:128.0) Gecko/20100101 Firefox/128.0",
          "Accept": "*/*",
          "Accept-Language": "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Connection": "keep-alive",
          "Referer": "http://localhost:5173/src/translation/index.ts",
          "Cookie": "csrftoken=JoG0lboZVZucsyUC10B83fyK2PSrJqgf; _pk_id.1.1fff=76aff4dcfa6d42d0.1719754794.; accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzIwMzczOTQ1LCJpYXQiOjE3MjAzNzM2NDUsImp0aSI6IjkyYjQzYmVjZjYxOTQyYTg5NDNjNWU2OGVjMDllYTQ3IiwidXNlcl9pZCI6MX0.9q_idMkvw61A5G6GQkM1WGfNo-jUZdncjM_JDqPh1Ps; refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcyMDQ2MDA0NSwiaWF0IjoxNzIwMzczNjQ1LCJqdGkiOiIwODJmMTYzMDEwNWY0YmViYTE2MjZjNjI5Y2U0ODFkMSIsInVzZXJfaWQiOjF9.Kh6m-J9pRfNqxauGr3E2UcLozG_px7iFCtCHeCHGb8I; tabstyle=html-tab; vuexy-color-scheme=dark; vuexy-isVerticalNavCollapsed=false; r-color-scheme=dark; rh-color-scheme=dark; rdh-color-scheme=dark; rdh--color-scheme=dark; rdh-corp-color-scheme=dark; rdh-corporte-color-scheme=dark; rdh-corporate-color-scheme=dark; rRD-corporate-color-scheme=dark; -corporate-color-scheme=dark; RDH-corporate-color-scheme=dark; RDH-corporate-isVerticalNavCollapsed=true; RDH-color-scheme=dark; -color-scheme=dark; R-color-scheme=dark; RDH-theme=light; RDH-corporate-theme=dark",
          "Sec-Fetch-Dest": "script",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Site": "same-origin",
          "Pragma": "no-cache",
          "Cache-Control": "no-cache"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'e79d9748'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"2bece-Xaf7PNXKhDGW/KSzBud32L4n2Eg\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  setupDevtoolsPlugin\n} from \"/node_modules/.vite/deps/chunk-YFT6OQ5R.js?v=e79d9748\";\nimport {\n  Fragment,\n  Text,\n  computed,\n  createVNode,\n  defineComponent,\n  effectScope,\n  getCurrentInstance,\n  h,\n  inject,\n  isRef,\n  onBeforeMount,\n  onMounted,\n  onUnmounted,\n  ref,\n  shallowRef,\n  watch\n} from \"/node_modules/.vite/deps/chunk-MGOCPVRW.js?v=e79d9748\";\nimport \"/node_modules/.vite/deps/chunk-G3PMV62Z.js?v=e79d9748\";\n\n// node_modules/@intlify/shared/dist/shared.mjs\nvar inBrowser = typeof window !== \"undefined\";\nvar mark;\nvar measure;\nif (true) {\n  const perf = inBrowser && window.performance;\n  if (perf && perf.mark && perf.measure && perf.clearMarks && // @ts-ignore browser compat\n  perf.clearMeasures) {\n    mark = (tag) => {\n      perf.mark(tag);\n    };\n    measure = (name, startTag, endTag) => {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n    };\n  }\n}\nvar RE_ARGS = /\\{([0-9a-zA-Z]+)\\}/g;\nfunction format(message, ...args) {\n  if (args.length === 1 && isObject(args[0])) {\n    args = args[0];\n  }\n  if (!args || !args.hasOwnProperty) {\n    args = {};\n  }\n  return message.replace(RE_ARGS, (match, identifier) => {\n    return args.hasOwnProperty(identifier) ? args[identifier] : \"\";\n  });\n}\nvar makeSymbol = (name, shareable = false) => !shareable ? Symbol(name) : Symbol.for(name);\nvar generateFormatCacheKey = (locale, key, source) => friendlyJSONstringify({ l: locale, k: key, s: source });\nvar friendlyJSONstringify = (json) => JSON.stringify(json).replace(/\\u2028/g, \"\\\\u2028\").replace(/\\u2029/g, \"\\\\u2029\").replace(/\\u0027/g, \"\\\\u0027\");\nvar isNumber = (val) => typeof val === \"number\" && isFinite(val);\nvar isDate = (val) => toTypeString(val) === \"[object Date]\";\nvar isRegExp = (val) => toTypeString(val) === \"[object RegExp]\";\nvar isEmptyObject = (val) => isPlainObject(val) && Object.keys(val).length === 0;\nvar assign = Object.assign;\nvar _globalThis;\nvar getGlobalThis = () => {\n  return _globalThis || (_globalThis = typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n};\nfunction escapeHtml(rawText) {\n  return rawText.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\");\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\nvar isArray = Array.isArray;\nvar isFunction = (val) => typeof val === \"function\";\nvar isString = (val) => typeof val === \"string\";\nvar isBoolean = (val) => typeof val === \"boolean\";\nvar isObject = (val) => val !== null && typeof val === \"object\";\nvar isPromise = (val) => {\n  return isObject(val) && isFunction(val.then) && isFunction(val.catch);\n};\nvar objectToString = Object.prototype.toString;\nvar toTypeString = (value) => objectToString.call(value);\nvar isPlainObject = (val) => {\n  if (!isObject(val))\n    return false;\n  const proto = Object.getPrototypeOf(val);\n  return proto === null || proto.constructor === Object;\n};\nvar toDisplayString = (val) => {\n  return val == null ? \"\" : isArray(val) || isPlainObject(val) && val.toString === objectToString ? JSON.stringify(val, null, 2) : String(val);\n};\nfunction join(items, separator = \"\") {\n  return items.reduce((str, item, index) => index === 0 ? str + item : str + separator + item, \"\");\n}\nvar RANGE = 2;\nfunction generateCodeFrame(source, start = 0, end = source.length) {\n  const lines = source.split(/\\r?\\n/);\n  let count = 0;\n  const res = [];\n  for (let i = 0; i < lines.length; i++) {\n    count += lines[i].length + 1;\n    if (count >= start) {\n      for (let j = i - RANGE; j <= i + RANGE || end > count; j++) {\n        if (j < 0 || j >= lines.length)\n          continue;\n        const line = j + 1;\n        res.push(`${line}${\" \".repeat(3 - String(line).length)}|  ${lines[j]}`);\n        const lineLength = lines[j].length;\n        if (j === i) {\n          const pad = start - (count - lineLength) + 1;\n          const length = Math.max(1, end > count ? lineLength - pad : end - start);\n          res.push(`   |  ` + \" \".repeat(pad) + \"^\".repeat(length));\n        } else if (j > i) {\n          if (end > count) {\n            const length = Math.max(Math.min(end - count, lineLength), 1);\n            res.push(`   |  ` + \"^\".repeat(length));\n          }\n          count += lineLength + 1;\n        }\n      }\n      break;\n    }\n  }\n  return res.join(\"\\n\");\n}\nfunction incrementer(code3) {\n  let current = code3;\n  return () => ++current;\n}\nfunction warn(msg, err) {\n  if (typeof console !== \"undefined\") {\n    console.warn(`[intlify] ` + msg);\n    if (err) {\n      console.warn(err.stack);\n    }\n  }\n}\nvar hasWarned = {};\nfunction warnOnce(msg) {\n  if (!hasWarned[msg]) {\n    hasWarned[msg] = true;\n    warn(msg);\n  }\n}\nfunction createEmitter() {\n  const events = /* @__PURE__ */ new Map();\n  const emitter = {\n    events,\n    on(event, handler) {\n      const handlers = events.get(event);\n      const added = handlers && handlers.push(handler);\n      if (!added) {\n        events.set(event, [handler]);\n      }\n    },\n    off(event, handler) {\n      const handlers = events.get(event);\n      if (handlers) {\n        handlers.splice(handlers.indexOf(handler) >>> 0, 1);\n      }\n    },\n    emit(event, payload) {\n      (events.get(event) || []).slice().map((handler) => handler(payload));\n      (events.get(\"*\") || []).slice().map((handler) => handler(event, payload));\n    }\n  };\n  return emitter;\n}\nvar isNotObjectOrIsArray = (val) => !isObject(val) || isArray(val);\nfunction deepCopy(src, des) {\n  if (isNotObjectOrIsArray(src) || isNotObjectOrIsArray(des)) {\n    throw new Error(\"Invalid value\");\n  }\n  const stack = [{ src, des }];\n  while (stack.length) {\n    const { src: src2, des: des2 } = stack.pop();\n    Object.keys(src2).forEach((key) => {\n      if (isNotObjectOrIsArray(src2[key]) || isNotObjectOrIsArray(des2[key])) {\n        des2[key] = src2[key];\n      } else {\n        stack.push({ src: src2[key], des: des2[key] });\n      }\n    });\n  }\n}\n\n// node_modules/@intlify/message-compiler/dist/message-compiler.esm-browser.js\nfunction createPosition(line, column, offset) {\n  return { line, column, offset };\n}\nfunction createLocation(start, end, source) {\n  const loc = { start, end };\n  if (source != null) {\n    loc.source = source;\n  }\n  return loc;\n}\nvar RE_ARGS2 = /\\{([0-9a-zA-Z]+)\\}/g;\nfunction format2(message, ...args) {\n  if (args.length === 1 && isObject2(args[0])) {\n    args = args[0];\n  }\n  if (!args || !args.hasOwnProperty) {\n    args = {};\n  }\n  return message.replace(RE_ARGS2, (match, identifier) => {\n    return args.hasOwnProperty(identifier) ? args[identifier] : \"\";\n  });\n}\nvar assign2 = Object.assign;\nvar isString2 = (val) => typeof val === \"string\";\nvar isObject2 = (val) => val !== null && typeof val === \"object\";\nfunction join2(items, separator = \"\") {\n  return items.reduce((str, item, index) => index === 0 ? str + item : str + separator + item, \"\");\n}\nvar CompileWarnCodes = {\n  USE_MODULO_SYNTAX: 1,\n  __EXTEND_POINT__: 2\n};\nvar warnMessages = {\n  [CompileWarnCodes.USE_MODULO_SYNTAX]: `Use modulo before '{{0}}'.`\n};\nfunction createCompileWarn(code3, loc, ...args) {\n  const msg = format2(warnMessages[code3] || \"\", ...args || []);\n  const message = { message: String(msg), code: code3 };\n  if (loc) {\n    message.location = loc;\n  }\n  return message;\n}\nvar CompileErrorCodes = {\n  // tokenizer error codes\n  EXPECTED_TOKEN: 1,\n  INVALID_TOKEN_IN_PLACEHOLDER: 2,\n  UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER: 3,\n  UNKNOWN_ESCAPE_SEQUENCE: 4,\n  INVALID_UNICODE_ESCAPE_SEQUENCE: 5,\n  UNBALANCED_CLOSING_BRACE: 6,\n  UNTERMINATED_CLOSING_BRACE: 7,\n  EMPTY_PLACEHOLDER: 8,\n  NOT_ALLOW_NEST_PLACEHOLDER: 9,\n  INVALID_LINKED_FORMAT: 10,\n  // parser error codes\n  MUST_HAVE_MESSAGES_IN_PLURAL: 11,\n  UNEXPECTED_EMPTY_LINKED_MODIFIER: 12,\n  UNEXPECTED_EMPTY_LINKED_KEY: 13,\n  UNEXPECTED_LEXICAL_ANALYSIS: 14,\n  // generator error codes\n  UNHANDLED_CODEGEN_NODE_TYPE: 15,\n  // minifier error codes\n  UNHANDLED_MINIFIER_NODE_TYPE: 16,\n  // Special value for higher-order compilers to pick up the last code\n  // to avoid collision of error codes. This should always be kept as the last\n  // item.\n  __EXTEND_POINT__: 17\n};\nvar errorMessages = {\n  // tokenizer error messages\n  [CompileErrorCodes.EXPECTED_TOKEN]: `Expected token: '{0}'`,\n  [CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER]: `Invalid token in placeholder: '{0}'`,\n  [CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER]: `Unterminated single quote in placeholder`,\n  [CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE]: `Unknown escape sequence: \\\\{0}`,\n  [CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE]: `Invalid unicode escape sequence: {0}`,\n  [CompileErrorCodes.UNBALANCED_CLOSING_BRACE]: `Unbalanced closing brace`,\n  [CompileErrorCodes.UNTERMINATED_CLOSING_BRACE]: `Unterminated closing brace`,\n  [CompileErrorCodes.EMPTY_PLACEHOLDER]: `Empty placeholder`,\n  [CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER]: `Not allowed nest placeholder`,\n  [CompileErrorCodes.INVALID_LINKED_FORMAT]: `Invalid linked format`,\n  // parser error messages\n  [CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL]: `Plural must have messages`,\n  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER]: `Unexpected empty linked modifier`,\n  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY]: `Unexpected empty linked key`,\n  [CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS]: `Unexpected lexical analysis in token: '{0}'`,\n  // generator error messages\n  [CompileErrorCodes.UNHANDLED_CODEGEN_NODE_TYPE]: `unhandled codegen node type: '{0}'`,\n  // minimizer error messages\n  [CompileErrorCodes.UNHANDLED_MINIFIER_NODE_TYPE]: `unhandled mimifier node type: '{0}'`\n};\nfunction createCompileError(code3, loc, options = {}) {\n  const { domain, messages, args } = options;\n  const msg = format2((messages || errorMessages)[code3] || \"\", ...args || []);\n  const error = new SyntaxError(String(msg));\n  erro... (169907 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.001148832991020754
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.0",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.11.1"
    },
    "app": "rdh-admin",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/vue-i18n.js (200) — 2024-07-13T11:59:16.330Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/vue-i18n.js"
        }
      ]
    }
  ]
}