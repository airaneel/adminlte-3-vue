/* tslint:disable */
/* eslint-disable */
/**
 * Your Project API
 * API documentation for your project
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@yourproject.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountSection,
  AccountSectionsList200Response,
} from '../models/index';
import {
    AccountSectionFromJSON,
    AccountSectionToJSON,
    AccountSectionsList200ResponseFromJSON,
    AccountSectionsList200ResponseToJSON,
} from '../models/index';

export interface AccountSectionsCreateRequest {
    data: Omit<AccountSection, 'id'>;
}

export interface AccountSectionsDeleteRequest {
    id: number;
}

export interface AccountSectionsListRequest {
    limit?: number;
    offset?: number;
}

export interface AccountSectionsPartialUpdateRequest {
    id: number;
    data: Omit<AccountSection, 'id'>;
}

export interface AccountSectionsReadRequest {
    id: number;
}

export interface AccountSectionsUpdateRequest {
    id: number;
    data: Omit<AccountSection, 'id'>;
}

/**
 * 
 */
export class AccountSectionsApi extends runtime.BaseAPI {

    /**
     */
    async accountSectionsCreateRaw(requestParameters: AccountSectionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountSection>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling accountSectionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/account-sections/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountSectionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountSectionFromJSON(jsonValue));
    }

    /**
     */
    async accountSectionsCreate(requestParameters: AccountSectionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountSection> {
        const response = await this.accountSectionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountSectionsDeleteRaw(requestParameters: AccountSectionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling accountSectionsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/account-sections/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async accountSectionsDelete(requestParameters: AccountSectionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountSectionsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async accountSectionsListRaw(requestParameters: AccountSectionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountSectionsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/account-sections/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountSectionsList200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async accountSectionsList(requestParameters: AccountSectionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountSectionsList200Response> {
        const response = await this.accountSectionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountSectionsPartialUpdateRaw(requestParameters: AccountSectionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountSection>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling accountSectionsPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling accountSectionsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/account-sections/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AccountSectionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountSectionFromJSON(jsonValue));
    }

    /**
     */
    async accountSectionsPartialUpdate(requestParameters: AccountSectionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountSection> {
        const response = await this.accountSectionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountSectionsReadRaw(requestParameters: AccountSectionsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountSection>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling accountSectionsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/account-sections/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountSectionFromJSON(jsonValue));
    }

    /**
     */
    async accountSectionsRead(requestParameters: AccountSectionsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountSection> {
        const response = await this.accountSectionsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountSectionsUpdateRaw(requestParameters: AccountSectionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountSection>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling accountSectionsUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling accountSectionsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/account-sections/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccountSectionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountSectionFromJSON(jsonValue));
    }

    /**
     */
    async accountSectionsUpdate(requestParameters: AccountSectionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountSection> {
        const response = await this.accountSectionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
