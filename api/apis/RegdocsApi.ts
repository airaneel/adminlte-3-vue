/* tslint:disable */
/* eslint-disable */
/**
 * Your Project API
 * API documentation for your project
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@yourproject.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Regdoc,
  RegdocsList200Response,
} from '../models/index';
import {
    RegdocFromJSON,
    RegdocToJSON,
    RegdocsList200ResponseFromJSON,
    RegdocsList200ResponseToJSON,
} from '../models/index';

export interface RegdocsCreateRequest {
    data: Omit<Regdoc, 'id'>;
}

export interface RegdocsDeleteRequest {
    id: number;
}

export interface RegdocsListRequest {
    id?: string;
    ruNumber?: string;
    manufacturerName?: string;
    code?: string;
    ruBody?: string;
    ruStatus?: RegdocsListRuStatusEnum;
    search?: string;
    limit?: number;
    offset?: number;
}

export interface RegdocsPartialUpdateRequest {
    id: number;
    data: Omit<Regdoc, 'id'>;
}

export interface RegdocsReadRequest {
    id: number;
}

export interface RegdocsUpdateRequest {
    id: number;
    data: Omit<Regdoc, 'id'>;
}

/**
 * 
 */
export class RegdocsApi extends runtime.BaseAPI {

    /**
     */
    async regdocsCreateRaw(requestParameters: RegdocsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Regdoc>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling regdocsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/regdocs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegdocToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegdocFromJSON(jsonValue));
    }

    /**
     */
    async regdocsCreate(requestParameters: RegdocsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Regdoc> {
        const response = await this.regdocsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async regdocsDeleteRaw(requestParameters: RegdocsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling regdocsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/regdocs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async regdocsDelete(requestParameters: RegdocsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.regdocsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async regdocsListRaw(requestParameters: RegdocsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegdocsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['ruNumber'] != null) {
            queryParameters['ru_number'] = requestParameters['ruNumber'];
        }

        if (requestParameters['manufacturerName'] != null) {
            queryParameters['manufacturer_name'] = requestParameters['manufacturerName'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['ruBody'] != null) {
            queryParameters['ru_body'] = requestParameters['ruBody'];
        }

        if (requestParameters['ruStatus'] != null) {
            queryParameters['ru_status'] = requestParameters['ruStatus'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/regdocs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegdocsList200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async regdocsList(requestParameters: RegdocsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegdocsList200Response> {
        const response = await this.regdocsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async regdocsPartialUpdateRaw(requestParameters: RegdocsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Regdoc>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling regdocsPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling regdocsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/regdocs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RegdocToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegdocFromJSON(jsonValue));
    }

    /**
     */
    async regdocsPartialUpdate(requestParameters: RegdocsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Regdoc> {
        const response = await this.regdocsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async regdocsReadRaw(requestParameters: RegdocsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Regdoc>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling regdocsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/regdocs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegdocFromJSON(jsonValue));
    }

    /**
     */
    async regdocsRead(requestParameters: RegdocsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Regdoc> {
        const response = await this.regdocsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async regdocsUpdateRaw(requestParameters: RegdocsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Regdoc>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling regdocsUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling regdocsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/regdocs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RegdocToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegdocFromJSON(jsonValue));
    }

    /**
     */
    async regdocsUpdate(requestParameters: RegdocsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Regdoc> {
        const response = await this.regdocsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const RegdocsListRuStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Dateout: 'dateout',
    Frozen: 'frozen'
} as const;
export type RegdocsListRuStatusEnum = typeof RegdocsListRuStatusEnum[keyof typeof RegdocsListRuStatusEnum];
